- name: Find the location of DB Home from the SID
  shell: 'grep {{ mysid }} /etc/oratab | grep -v ^[#] | cut -d: -f2 | head -1'
  register: dbhomeoutput
  delegate_to: "{{ vm_ip_address }}"

- name : Define DB Home
  set_fact:
    dbhome_locl: "{{ dbhomeoutput.stdout }}"

- name : Print DB Home
  debug: var=dbhome_locl

- name : Fail when ORACLE_HOME is null
  fail:
    msg: "Could not find ORACLE_HOME. Check if database {{ mysid }} is registered in /etc/oratab."
  when: dbhomeoutput.stdout == ''

- block:

  - name: Copy ocm.rsp to VM shared folder
    copy:
      src: files/ocm.rsp
      dest: "{{ shared_folder }}"
      mode: u=rw,g=r,o=r

  - name: Check if Database Vault is enabled
    shell: 'ar -t {{dbhome_locl}}/rdbms/lib/libknlopt.a | grep -q kzvidv.o && echo true || echo false'
    register: dbvaultoutput
    delegate_to: "{{ vm_ip_address }}"

  - name : Define Database Vault variable
    set_fact:
      dbvault_enabled: "{{ dbvaultoutput.stdout | bool }}"

  - name : Print Database Vault value
    debug: msg="Database Vault Enabled - {{ dbvault_enabled }}"

# when: db_version == "11.2.0.2" or db_version == "11.2.0.3" or db_version == "11.2.0.4"
  when: ( db_version | regex_replace('^([^\.]+).*','\\1') | int ) <= 11

### Check if CDB

- block:

  - name: "Startup"
    include: run_sql.yml
    vars:
      sql_param : { file : "startup.sql" , folder : "patch_sql" , task_action : "Start Database" }
    when: oci_mode

  - name: "Check if CDB is enabled"
    shell: |
         set -eo pipefail
         export ORACLE_HOME ORACLE_SID
         {{ dbhome_locl }}/bin/sqlplus -L -S "/ as sysdba" <<'EOF' | sed '/^$/d'
         whenever sqlerror exit sql.sqlcode
         set pages 0 head off feed off echo off trims on ver off term on
         select decode(substr(CDB,1,1),'Y','true','N','false') is_cdb from v$database;
         exit
         EOF
    environment:
      ORACLE_HOME: "{{ dbhome_locl }}"
      ORACLE_SID: "{{ mysid }}"
    register: shell_output
    become: true
    become_user: oracle
    delegate_to: "{{ vm_ip_address }}"

  - name: SQL Output
    debug: msg="{{ shell_output.stdout_lines }}"

  - name : Define CDB variable
    set_fact:
      db_iscdb: "{{ shell_output.stdout | bool }}"

  # If any error happens in this block, will trigger a LVM refresh and try again.
  rescue:

  - name: Already tried that before error. No other chance.
    fail:
      msg: "Failed to get some database information."
    when: db_start_retried is defined and db_start_retried

  - name: Print when errors
    debug:
      msg: 'I caught an error. Trying to lvm reload..'

  - name : Set db_start_retried variable
    set_fact:
      db_start_retried: true

  - include: lvm_reload.yml
    when: oci_mode

  - include: setup_database.yml

  # If the previous include succeeded, reset variable.
  - name : Clean db_start_retried variable
    set_fact:
      db_start_retried: false

# when: db_version != "11.2.0.2" and db_version != "11.2.0.3" and db_version != "11.2.0.4"
  when: ( db_version | regex_replace('^([^\.]+).*','\\1') | int ) > 11


- name : Define CDB variable
  set_fact:
    db_iscdb: false
# when: db_version == "11.2.0.2" or db_version == "11.2.0.3" or db_version == "11.2.0.4"
  when: ( db_version | regex_replace('^([^\.]+).*','\\1') | int ) <= 11

### Adjust dump_user_int based on database type and provided value.

- name : Fail when dump_user is invalid
  fail:
    msg: "Username can't start with C## when not a CDB."
  when: db_iscdb == false and ( dump_user | regex_replace('(...).*','\\1') | upper ) == "C##"

- name : Define internal dump_user variable
  set_fact:
    dump_user_int: "{{ dump_user }}"
  when: db_iscdb == false or ( dump_user | regex_replace('(...).*','\\1') | upper ) == "C##"

- name : Define internal dump_user variable if CDB
  set_fact:
    dump_user_int: "c##{{ dump_user }}"
  when: db_iscdb == true and ( dump_user | regex_replace('(...).*','\\1') | upper ) != "C##"
