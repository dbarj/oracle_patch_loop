### Will Run RU + OJVM + RUR + MRP for given version

- name : Define version
  set_fact:
    patch_file:    "{{ item.main_file }}"
    patch_list:    "{{ item.patch_list }}"
    opatch_file:   "{{ item.opatch_file }}"
  with_items: "{{ list_versions }}"
  when: item.id == db_version

- name : Define VBox params
  set_fact:
    vm_machine:    "{{ item.vmachine }}"
    vm_ip_address: "{{ item.ip }}"
    patch_base:    "{{ item.base_snap }}"
  with_items: "{{ list_info_vbox }}"
  when: item.id == db_version and not oci_mode

- name : Define Cloud params
  set_fact:
    oci_instance_id: "{{ item.oci_instance_id }}"
    patch_base:    "{{ item.base_snap }}"
    out_of_box_ru: "{{ item.out_of_box_ru | default(0) }}"
  with_items: "{{ list_info_oci }}"
  when: item.id == db_version and oci_mode

# This parameter will control if database start command was ever called.
- name : Define database_started variable to false.
  set_fact:
    database_started: false

### For RU or OJVM
- block:

  # Define base_OJVM_line. This is used by patch_task_post to save the snapshot.
  - name: Get latest RU ID
    set_fact:
      latest_RU_id: "{{ lookup('vars', patch_list) | json_query(filter_qry_1) | max }}"
      base_OJVM_id: "{{ ( ( lookup('vars', patch_list) | json_query(filter_qry_2) ) + [0] ) | max }}"
    vars:
      filter_qry_1: "[? type == 'RU' ].id"
      filter_qry_2: "[? type == 'RU' && base_ojvm != null ].id"

  - name : Set base OJVM ID
    set_fact:
      base_OJVM_id: "{{ latest_RU_id }}"
    when: (base_OJVM_id | int) == 0

  - name : Generate base_OJVM_line
    set_fact:
      base_OJVM_line: "{{ db_version }}|RU|{{ base_OJVM_id }}"

  - name: "Base OJVM"
    debug: msg="Base OJVM ID - {{ base_OJVM_line }}"

  when: param_type is undefined or param_type == "RU" or param_type == "OJVM"

### RU
- block:

  - name : Define snapshot base version to rollback when reload is called.
    set_fact:
      vm_snapshot: "{{ patch_base }}"

  # Execute for base release
  - include: "{{ patch_file }}"
    vars:
      patch : { type : RU , id : "{{ out_of_box_ru }}" , patch_number : 0 }
    when:
      - (out_of_box_ru | float) == (param_patch | float)      or param_patch == -1
      - (out_of_box_ru | float) >= (param_patch_from | float) or param_patch_from == -1
      - (out_of_box_ru | float) <= (param_patch_to | float)   or param_patch_to == -1

  # Execute for every RU
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "RU"
      - patch.id == (param_patch | float)      or param_patch == -1
      - patch.id >= (param_patch_from | float) or param_patch_from == -1
      - patch.id <= (param_patch_to | float)   or param_patch_to == -1
      - patch.id > (out_of_box_ru | float)

  when: param_type is undefined or param_type == "RU"

### OJVM
- block:

  ### Clean OJVM dumps if base_OJVM_id is different from the last.
  - include: clean_ojvm_dumps.yml base_id="RU_{{ base_OJVM_id }}"

  - name : Change Base Snapshot Name - VBox Mode
    set_fact:
      vm_snapshot: "{{ db_version }} RU {{ base_OJVM_id }}"
    when: not oci_mode

  - name : Change Base Snapshot Name - LVM Mode
    set_fact:
      vm_snapshot: "RU_{{ base_OJVM_id }}"
    when: oci_mode

  - name: "Base Snapshot will be {{ vm_snapshot }}"
    debug: msg="Base Snapshot will be {{ vm_snapshot }}"

  # Execute for every OJVM
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "OJVM"
      - patch.id == (param_patch | float)      or param_patch == -1
      - patch.id >= (param_patch_from | float) or param_patch_from == -1
      - patch.id <= (param_patch_to | float)   or param_patch_to == -1

  when: param_type is undefined or param_type == "OJVM"

### RUR
- block:

  - name : Define snapshot base version to rollback when reload is called.
    set_fact:
      vm_snapshot: "{{ patch_base }}"

  # Execute for every RUR
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "RUR"
      - patch.id == (param_patch | float)      or param_patch == -1
      - patch.id >= (param_patch_from | float) or param_patch_from == -1
      - patch.id <= (param_patch_to | float)   or param_patch_to == -1

  when: param_type is undefined or param_type == "RUR"

### MRP
- block:

  - name : Define snapshot base version to rollback when reload is called.
    set_fact:
      vm_snapshot: "{{ patch_base }}"

  # Execute for every MRP
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "MRP"
      - patch.id == (param_patch | float)      or param_patch == -1
      - patch.id >= (param_patch_from | float) or param_patch_from == -1
      - patch.id <= (param_patch_to | float)   or param_patch_to == -1

  when: param_type is undefined or param_type == "MRP"

# Stop OCI VM
- name: Call role to stop OCI VM
  include_role:
    name: oci_compute_instance_actions
  vars:
    compute_action: stop
  when: oci_mode and not only_deploy_patch and database_started