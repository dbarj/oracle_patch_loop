### Will Run RU + OJVM + RUR for given version

- name : Define version
  set_fact:
    vm_machine:  "{{ item.vmachine }}"
    patch_base:  "{{ item.base_snap }}"
    patch_file:  "{{ item.main_file }}"
    patch_list:  "{{ item.patch_list }}"
  with_items: "{{ list_versions }}"
  when: item.id == db_version

# vm_reload is called before every patch is applied to rollback the VM to the snapshot image.
- name : Define snapshot base version to rollback when vm_reload is called.
  set_fact:
    vm_snapshot: "{{ patch_base }}"

- include: vm_reload.yml
- include: setup_database.yml

### RU
- block:

  # Execute for base release
  - include: "{{ patch_file }} patch={{ item }}"
    with_items:
      - { type : RU , id : 0, patch_number : 0 }
    when:
      - item.id == param_patch              or param_patch == -1
      - item.id >= (param_patch_from | int) or param_patch_from == -1
      - item.id <= (param_patch_to | int)   or param_patch_to == -1

  # Execute for every RU
  - include: "{{ patch_file }} patch={{ item }}"
    with_items: "{{ lookup('vars', patch_list) }}"
    when:
      - item.type == "RU"
      - item.id == param_patch              or param_patch == -1
      - item.id >= (param_patch_from | int) or param_patch_from == -1
      - item.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "RU"

### Save latest applied RU as Base Snapshot for OJVM. Why? OJVM can't be appied over base release. They requires a DB RU.
- block:

  - name: Get latest RU ID
    set_fact:
      latest_RU_id: "{{ lookup('vars', patch_list) | json_query(filter_qry) | max }}"
    vars:
      filter_qry: "[?type=='RU'].id"

  - name : Generate Snapshot Name
    set_fact:
      vm_snapshot: "{{ db_version }} RU {{ latest_RU_id }}"
      latest_RU_line: "{{ db_version }}.RU.{{ latest_RU_id }}"

  - name: "Latest RU"
    debug: msg="Latest RU ID - {{ latest_RU_line }}"

  # Save lastest RU as a new snapshot - Also changes vm_snapshot variable to it (for OJVM).
  - include: vm_savestate.yml
    when: latest_RU_line == latest_processed

  when: param_type is undefined or param_type == "RU"

### OJVM define base Snapshot
# Will define it if not already done by the RU above task. i.e: param_type is defined and "OJVM"
- block:

  - name: Get latest RU ID
    set_fact:
      latest_RU_id: "{{ lookup('vars', patch_list) | json_query(filter_qry) | max }}"
    vars:
      filter_qry: "[?type=='RU'].id"

  - name : Generate Snapshot Name
    set_fact:
      vm_snapshot: "{{ db_version }} RU {{ latest_RU_id }}"

  - name: "Base Snapshot will be {{ vm_snapshot }}"
    debug: msg="Base Snapshot will be {{ vm_snapshot }}"

  when: param_type is defined and param_type == "OJVM"

### OJVM
- block:

  # Execute for every OJVM
  - include: "{{ patch_file }} patch={{ item }}"
    with_items: "{{ lookup('vars', patch_list) }}"
    when:
      - item.type == "OJVM"
      - item.id == param_patch              or param_patch == -1
      - item.id >= (param_patch_from | int) or param_patch_from == -1
      - item.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "OJVM"

### RUR
- block:

  - name : Define snapshot base version to rollback when vm_reload is called.
    set_fact:
      vm_snapshot: "{{ patch_base }}"

  # Execute for every RUR
  - include: "{{ patch_file }} patch={{ item }}"
    with_items: "{{ lookup('vars', patch_list) }}"
    when:
      - item.type == "RUR"
      - item.id == param_patch              or param_patch == -1
      - item.id >= (param_patch_from | int) or param_patch_from == -1
      - item.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "RUR"
