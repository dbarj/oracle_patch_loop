### Will Run RU + OJVM + RUR for given version

- name : Define version
  set_fact:
    vm_machine:    "{{ item.vmachine }}"
    vm_ip_address: "{{ item.ip }}"
    patch_base:    "{{ item.base_snap }}"
    patch_file:    "{{ item.main_file }}"
    patch_list:    "{{ item.patch_list }}"
    opatch_file:   "{{ item.opatch_file }}"
  with_items: "{{ list_versions }}"
  when: item.id == db_version

- name : Define Cloud params
  set_fact:
    oci_instance_id: "{{ item.oci_instance_id }}"
    patch_base:    "{{ item.base_snap }}"
    out_of_box_ru: "{{ item.out_of_box_ru | default(0) }}"
  with_items: "{{ list_info_oci }}"
  when: item.id == db_version and oci_mode == true

# reload is called before every patch is applied to rollback the VM to the snapshot image.
- name : Define snapshot base version to rollback when reload is called.
  set_fact:
    vm_snapshot: "{{ patch_base }}"

# This parameter will control if database start command was ever called.
- name : Define database_started variable to false.
  set_fact:
    database_started: false

### RU
- block:

  # Execute for base release
  - include: "{{ patch_file }}"
    vars:
      patch : { type : RU , id : "{{ out_of_box_ru }}" , patch_number : 0 }
    when:
      - (out_of_box_ru | int) == (param_patch | int)      or param_patch == -1
      - (out_of_box_ru | int) >= (param_patch_from | int) or param_patch_from == -1
      - (out_of_box_ru | int) <= (param_patch_to | int)   or param_patch_to == -1

  # Execute for every RU
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "RU"
      - patch.id == (param_patch | int)      or param_patch == -1
      - patch.id >= (param_patch_from | int) or param_patch_from == -1
      - patch.id <= (param_patch_to | int)   or param_patch_to == -1
      - patch.id > (out_of_box_ru | int)

  when: param_type is undefined or param_type == "RU"

### Save latest applied RU as Base Snapshot for OJVM. Why? OJVM can't be appied over base release. They requires a DB RU.
- block:

  - name: Get latest RU ID
    set_fact:
      latest_RU_id: "{{ lookup('vars', patch_list) | json_query(filter_qry) | max }}"
    vars:
      filter_qry: "[?type=='RU'].id"

  - name : Generate Snapshot Name - VBox Mode
    set_fact:
      vm_snapshot: "{{ db_version }} RU {{ latest_RU_id }}"
      latest_RU_line: "{{ db_version }}.RU.{{ latest_RU_id }}"
    when: oci_mode == false

  - name : Generate Snapshot Name - LVM Mode
    set_fact:
      vm_snapshot: "RU_{{ latest_RU_id }}"
      latest_RU_line: "{{ db_version }}.RU.{{ latest_RU_id }}"
    when: oci_mode == true

  - name: "Latest RU"
    debug: msg="Latest RU ID - {{ latest_RU_line }}"

  # Save lastest RU as a new snapshot - Also changes vm_snapshot variable to it (for OJVM).
  - include: vbox_savestate.yml
    when: latest_RU_line == latest_processed and oci_mode == false

  - include: lvm_savestate.yml
    when: latest_RU_line == latest_processed and oci_mode == true

  - include: clean_ojvm_dumps.yml base_id="RU_{{ latest_RU_id }}"

  when: param_type is undefined or param_type == "RU"

### OJVM define base Snapshot
# Will define it if not already done by the RU above task. i.e: param_type is defined and "OJVM"
- block:

  - name: Get latest RU ID
    set_fact:
      latest_RU_id: "{{ lookup('vars', patch_list) | json_query(filter_qry) | max }}"
    vars:
      filter_qry: "[?type=='RU'].id"

  - name : Generate Snapshot Name - VBox Mode
    set_fact:
      vm_snapshot: "{{ db_version }} RU {{ latest_RU_id }}"
    when: oci_mode == false

  - name : Generate Snapshot Name - LVM Mode
    set_fact:
      vm_snapshot: "RU_{{ latest_RU_id }}"
    when: oci_mode == true

  - name: "Base Snapshot will be {{ vm_snapshot }}"
    debug: msg="Base Snapshot will be {{ vm_snapshot }}"

  when: param_type is defined and param_type == "OJVM"

### OJVM
- block:

  # Execute for every OJVM
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "OJVM"
      - patch.id == (param_patch | int)      or param_patch == -1
      - patch.id >= (param_patch_from | int) or param_patch_from == -1
      - patch.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "OJVM"

### RUR
- block:

  - name : Define snapshot base version to rollback when reload is called.
    set_fact:
      vm_snapshot: "{{ patch_base }}"

  # Execute for every RUR
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "RUR"
      - patch.id == (param_patch | int)      or param_patch == -1
      - patch.id >= (param_patch_from | int) or param_patch_from == -1
      - patch.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "RUR"

# Stop OCI VM
- name: Call role to stop OCI VM
  include_role:
    name: oci_compute_instance_actions
  vars:
    compute_action: stop
  when: oci_mode == true and not only_deploy_patch and database_started == true