# Pre Actions
- include: patch_tasks_pre.yml

- block:

  # Stop the database
  - include: run_sql.yml
    vars:
      sql_param : { file : "shutdown.sql" , folder : "patch_sql" , task_action : "Stop Database" }

  - name: Run OPatch
    shell: |
         export ORACLE_HOME ORACLE_SID
         ./opatch apply -silent {{ VM_folder }}/{{ patch.patch_number }}
    environment:
      ORACLE_HOME: "{{ dbhome_locl }}"
      ORACLE_SID: "{{ mysid }}"
    args:
      chdir: "{{ dbhome_locl }}/OPatch"
    register: sqloutput
    become: true
    become_user: oracle
    when: patch.id != 0
    delegate_to: "{{ VM_IP_address }}"
  
  - name: Opatch Output
    debug: msg="{{ sqloutput.stdout_lines }}"
    when: sqloutput.stdout_lines is defined
  
  # Start the database
  - include: run_sql.yml
    vars:
      sql_param : { file : "startupCDB.sql" , folder : "patch_sql" , task_action : "Start Database" }
    when: patch.type != "OJVM"
  
  # Start the database (in OJVM, it must be in upgrade mode)
  - include: run_sql.yml
    vars:
      sql_param : { file : "startupCDBOJVM.sql" , folder : "patch_sql" , task_action : "Start Database" }
    when: patch.type == "OJVM"
  
  #- name : Apply patch changes on DB
  - name: Run Datapatch
    shell: |
         export ORACLE_HOME ORACLE_SID
         ./datapatch -verbose > /tmp/datapatch.log 2>&1
    environment:
      ORACLE_HOME: "{{ dbhome_locl }}"
      ORACLE_SID: "{{ mysid }}"
    args:
      chdir: "{{ dbhome_locl }}/OPatch"
    register: sqloutput
    become: true
    become_user: oracle
    when: patch.id != 0
    delegate_to: "{{ VM_IP_address }}"
  # Variable export and chdir introduced to solve an issue in 12.1.0.1 PSU 7 - Patch 20299016
  
  - name: Datapatch Output
    debug: msg="{{ sqloutput.stdout_lines }}"
    when: sqloutput.stdout_lines is defined
  
  # Evaluate if it's needed to reexecute datapatch on 12.1.1 due to bug.
  
  # Bounce instance on OJVM to remove "upgrade" mode
  - block:
  
    - include: run_sql.yml
      vars:
        sql_param : { file : "shutdown.sql" , folder : "patch_sql" , task_action : "Stop Database" }

    - include: run_sql.yml
      vars:
        sql_param : { file : "startupCDB.sql" , folder : "patch_sql" , task_action : "Start Database" }

    when: patch.type == "OJVM"

  # User custom pre-scripts
  - include: run_script.yml
    loop: "{{ user_expdp_pre | flatten(levels=1) }}"
    loop_control:
      loop_var: script_param
  
  #- name : Export database tables
  - name: Export Database Tables
    shell: |
         {{ dbhome_locl }}/bin/expdp userid={{ dump_user_int }}/{{ dump_pass }} directory=expdir compression=all dumpfile={{ dump_file_prefix }}.dmp logfile={{ dump_file_prefix }}.log content=data_only schemas={{ dump_user_int }}
    environment:
      ORACLE_HOME: "{{ dbhome_locl }}"
      ORACLE_SID: "{{ mysid }}"
    register: sqloutput
    become: true
    become_user: oracle
    delegate_to: "{{ VM_IP_address }}"
  
  # User custom post-scripts
  - include: run_script.yml
    loop: "{{ user_expdp_post | flatten(levels=1) }}"
    loop_control:
      loop_var: script_param
  
  # Post Actions
  - include: patch_tasks_post.yml

  when: skip_all == false
# Skip all is true when dump file is already generated and skip_dump_exists is true at config.