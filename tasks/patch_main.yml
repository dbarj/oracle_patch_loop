# Pre Actions
- include: patch_tasks_pre.yml

- block:

  # Stop the database
  - include: run_sql.yml
    vars:
      sql_param : { file : "shutdown.sql" , folder : "patch_sql" , task_action : "Stop Database for OPatch" }
    when: oci_mode == false

  - name: Run OPatch
    shell: |
         export ORACLE_HOME ORACLE_SID
         ./opatch apply -silent {{ VM_folder }}/{{ patch.patch_number }}
    environment:
      ORACLE_HOME: "{{ dbhome_locl }}"
      ORACLE_SID: "{{ mysid }}"
    args:
      chdir: "{{ dbhome_locl }}/OPatch"
    register: shell_output
    become: true
    become_user: oracle
    when: patch.patch_number != 0
    delegate_to: "{{ vm_ip_address }}"

  - name: Opatch Output
    debug: msg="{{ shell_output.stdout_lines }}"
    when: shell_output.stdout_lines is defined

  # Start the database
  - include: run_sql.yml
    vars:
      sql_param : { file : "startupCDB.sql" , folder : "patch_sql" , task_action : "Start Database for sqlpatch" }
    when: patch.type != "OJVM"

  # Start the database (in OJVM, it must be in upgrade mode)
  - include: run_sql.yml
    vars:
      sql_param : { file : "startupCDBOJVM.sql" , folder : "patch_sql" , task_action : "Start Database for OJVM sqlpatch" }
    when: patch.type == "OJVM"

  # Run Datapatch
  - name: Set datapatch try variable
    set_fact: datapatch_try=0

  - name: Run Datapatch
    include: datapatch.yml
    when: patch.patch_number != 0

  # Evaluate if it's needed to reexecute datapatch on 12.1.1 due to bug.

  # Bounce instance on OJVM to remove "upgrade" mode
  - block:

    - include: run_sql.yml
      vars:
        sql_param : { file : "shutdown.sql" , folder : "patch_sql" , task_action : "Stop Database" }

    - include: run_sql.yml
      vars:
        sql_param : { file : "startupCDB.sql" , folder : "patch_sql" , task_action : "Start Database" }

    when: patch.type == "OJVM"

  # When only_deploy_patch is false (most common case)
  - block:

    # User custom pre-scripts
    - include: run_script.yml
      loop: "{{ user_expdp_pre | flatten(levels=1) }}"
      loop_control:
        loop_var: script_param

    - name: Set version parameter for expdp
      set_fact:
        expdp_version: "version={{ target_db_version }}"
      when: (db_version.split('.')[0] | int) > target_db_version

    - name: Export Database Tables
      shell: |
          {{ dbhome_locl }}/bin/expdp userid={{ dump_user_int }}/{{ dump_pass }} directory=expdir compression=all dumpfile={{ dump_file_prefix }}.dmp logfile={{ dump_file_prefix }}.log content=data_only schemas={{ dump_user_int }} {{ expdp_version }}
      environment:
        ORACLE_HOME: "{{ dbhome_locl }}"
        ORACLE_SID: "{{ mysid }}"
      register: shell_output
      become: true
      become_user: oracle
      delegate_to: "{{ vm_ip_address }}"

    # User custom post-scripts
    - include: run_script.yml
      loop: "{{ user_expdp_post | flatten(levels=1) }}"
      loop_control:
        loop_var: script_param

    when: not only_deploy_patch

  # Post Actions
  - include: patch_tasks_post.yml

  when: skip_all == false
# Skip all is true when dump file is already generated and skip_dump_exists is true at config.