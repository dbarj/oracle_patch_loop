### Will Run PSU + OJVM + BP for given version

- name : Define version
  set_fact:
    patch_file:    "{{ item.main_file }}"
    patch_list:    "{{ item.patch_list }}"
    opatch_file:   "{{ item.opatch_file }}"
  with_items: "{{ list_versions }}"
  when: item.id == db_version

- name : Define VBox params
  set_fact:
    vm_machine:    "{{ item.vmachine }}"
    vm_ip_address: "{{ item.ip }}"
    patch_base:    "{{ item.base_snap }}"
  with_items: "{{ list_info_vbox }}"
  when: item.id == db_version and not oci_mode

- name : Define Cloud params
  set_fact:
    oci_instance_id: "{{ item.oci_instance_id }}"
    patch_base:    "{{ item.base_snap }}"
  with_items: "{{ list_info_oci }}"
  when: item.id == db_version and oci_mode

# reload is called before every patch is applied to rollback the VM to the snapshot image.
- name : Define snapshot base version to rollback when reload is called.
  set_fact:
    vm_snapshot: "{{ patch_base }}"

# This parameter will control if database start command was ever called.
- name : Define database_started variable to false.
  set_fact:
    database_started: false

### PSU
- block:

  # Execute for base release
  - include: "{{ patch_file }}"
    vars:
      patch : { type : PSU , id : 0, patch_number : 0 }
    when:
      - 0 == (param_patch | int)      or param_patch == -1
      - 0 >= (param_patch_from | int) or param_patch_from == -1
      - 0 <= (param_patch_to | int)   or param_patch_to == -1

  # Execute for every PSU
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "PSU"
      - patch.id == (param_patch | int)      or param_patch == -1
      - patch.id >= (param_patch_from | int) or param_patch_from == -1
      - patch.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "PSU"

### Save latest applied PSU as Base Snapshot for OJVM. Why? OJVM can't be appied over base release. They requires a DB PSU.
- block:

  - name: Get latest PSU ID
    set_fact:
      latest_psu_id: "{{ lookup('vars', patch_list) | json_query(filter_qry) | max }}"
    vars:
      filter_qry: "[?type=='PSU'].id"

  - name : Generate Snapshot Name - VBox Mode
    set_fact:
      vm_snapshot: "{{ db_version }} PSU {{ latest_psu_id }}"
      latest_psu_line: "{{ db_version }}.PSU.{{ latest_psu_id }}"
    when: not oci_mode

  - name : Generate Snapshot Name - LVM Mode
    set_fact:
      vm_snapshot: "PSU_{{ latest_psu_id }}"
      latest_psu_line: "{{ db_version }}.PSU.{{ latest_psu_id }}"
    when: oci_mode

  - name: "Latest PSU"
    debug: msg="Latest PSU ID - {{ latest_psu_line }}"

  # Save lastest PSU as a new snapshot - Also changes vm_snapshot variable to it (for OJVM).
  - include: vbox_savestate.yml
    when: latest_psu_line == latest_processed and not oci_mode

  - include: lvm_savestate.yml
    when: latest_psu_line == latest_processed and oci_mode

  - include: clean_ojvm_dumps.yml base_id="PSU_{{ latest_psu_id }}"

  when: param_type is undefined or param_type == "PSU"

### OJVM define base Snapshot
# Will define it if not already done by the PSU above task. i.e: param_type is defined and "OJVM"
- block:

  - name: Get latest PSU ID
    set_fact:
      latest_psu_id: "{{ lookup('vars', patch_list) | json_query(filter_qry) | max }}"
    vars:
      filter_qry: "[?type=='PSU'].id"

  - name : Generate Snapshot Name - VBox Mode
    set_fact:
      vm_snapshot: "{{ db_version }} PSU {{ latest_psu_id }}"
    when: not oci_mode

  - name : Generate Snapshot Name - LVM Mode
    set_fact:
      vm_snapshot: "PSU_{{ latest_psu_id }}"
    when: oci_mode

  - name: "Base Snapshot will be {{ vm_snapshot }}"
    debug: msg="Base Snapshot will be {{ vm_snapshot }}"

  when: param_type is defined and param_type == "OJVM"

### OJVM
- block:

  # Execute for every OJVM
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "OJVM"
      - patch.id == (param_patch | int)      or param_patch == -1
      - patch.id >= (param_patch_from | int) or param_patch_from == -1
      - patch.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "OJVM"

### BP
- block:

  - name : Define snapshot base version to rollback when reload is called.
    set_fact:
      vm_snapshot: "{{ patch_base }}"

  - name : Check if there is any BP
    set_fact:
      total_bps: "{{ lookup('vars', patch_list) | json_query(filter_qry) | count }}"
    vars:
      filter_qry: "[?type=='BP'].id"

  # Execute for base release if there is at least 1 BP for that version
  - include: "{{ patch_file }}"
    vars:
      patch : { type : BP , id : 0, patch_number : 0 }
    when:
      - total_bps != "0"
      - 0 == (param_patch | int)      or param_patch == -1
      - 0 >= (param_patch_from | int) or param_patch_from == -1
      - 0 <= (param_patch_to | int)   or param_patch_to == -1

  # Execute for every BP
  - include: "{{ patch_file }}"
    loop: "{{ lookup('vars', patch_list) | flatten(levels=1) }}"
    loop_control:
      loop_var: patch
      label: "{{ patch.id }}"
    when:
      - patch.type == "BP"
      - patch.id == (param_patch | int)      or param_patch == -1
      - patch.id >= (param_patch_from | int) or param_patch_from == -1
      - patch.id <= (param_patch_to | int)   or param_patch_to == -1

  when: param_type is undefined or param_type == "BP"

# Stop OCI VM
- name: Call role to stop OCI VM
  include_role:
    name: oci_compute_instance_actions
  vars:
    compute_action: stop
  when: oci_mode and not only_deploy_patch and database_started