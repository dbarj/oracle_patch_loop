# Folder to store the collected ORACLE_HOME text files
- name : Define symbols folder name
  set_fact:
    symbols_folder: "{{ output_folder }}/symbols"

- name : Define symbols file names
  set_fact:
    symbols_file: "symbols_{{ db_version }}_{{ patch.base_ru | default('') }}{{ patch.type }}_{{ patch.id }}.csv"

- name: "Check if {{ symbols_folder }}/{{ symbols_file }} exists"
  stat:
    path: "{{ symbols_folder }}/{{ symbols_file }}"
  register: symbols_stat_result

# Will skip the rest if the symbols file exists

- block :

  # Thanks Frits Hooglang
  - name: Collect symbols from ORACLE_HOME
    shell: |
        echo > "{{ VM_folder }}/{{ symbols_file }}"

        # Extract Symbols from Oracle archives (.a)
        for ARCHIVE in $(ls $ORACLE_HOME/lib/*.a $ORACLE_HOME/rdbms/lib/*.a); do
          nm -A $ARCHIVE | grep ' [Tt] ' | tr ':' ' ' | cut -d" " -f1,2,4,5 | sort -u | awk '{ if ( $4 != "" ) { file=$1; sub(".*/","", file); printf "%s/%s|%s|%s\n", file, $2, $3, $4 } }' >> "{{ VM_folder }}/{{ symbols_file }}"
        done

        # Extract Symbols from Oracle objects (.o)
        for OBJECT in $(ls $ORACLE_HOME/lib/*.o $ORACLE_HOME/rdbms/lib/*.o); do
          nm -A $OBJECT | grep ' [Tt] ' | tr ':' ' ' | cut -d" " -f1,3,4 | sort -u | awk '{ if ( $3 != "" ) { file=$1; sub(".*/","", file); printf "%s|%s|%s\n", file, $2, $3 } }' >> "{{ VM_folder }}/{{ symbols_file }}"
        done

        # Extract Symbols from Oracle executable
        nm -A -C $ORACLE_HOME/bin/oracle | grep ' [TtDdRrVv] ' | tr ':' ' ' | cut -d" " -f1,3,4 | sort -u | awk '{ if ( $3 != "" ) { file=$1; sub(".*/","", file); printf "%s|%s|%s\n", file, $2, $3 } }' >> "{{ VM_folder }}/{{ symbols_file }}"

        # Remove empty lines or sqlldr will fail due to constant.
        sed -i '/^$/d' "{{ VM_folder }}/{{ symbols_file }}"

    args:
      chdir: "{{ dbhome_locl }}"
    environment:
      ORACLE_HOME: "{{ dbhome_locl }}"
    become: true
    become_user: root
    delegate_to: "{{ vm_ip_address }}"

  - name: Copy {{ symbols_file }} to repository
    copy:
      src: "{{ shared_folder }}/{{ symbols_file }}"
      dest: "{{ symbols_folder }}"

  - name : "Remove file {{ symbols_file }}"
    file:
      state: absent
      path: "{{ shared_folder }}/{{ symbols_file }}"

  when: not symbols_stat_result.stat.exists