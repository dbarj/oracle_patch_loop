WHENEVER SQLERROR EXIT SQL.SQLCODE

SET LINES 1000

DEF P_OWNER = '&1'
DEF P_PATCH = '&2'
DEF P_SER   = '&3'
DEF P_VERS  = '&4'

CREATE OR REPLACE FUNCTION GET_HIGH_VALUE_AS_STRING (
    p_Owner         IN VARCHAR2,
    p_TableName     IN VARCHAR2,
    p_PatitionName  IN VARCHAR2
) RETURN VARCHAR2
IS
   v_LongVal LONG;
BEGIN
    SELECT HIGH_VALUE INTO v_LongVal
      FROM ALL_TAB_PARTITIONS
     WHERE TABLE_OWNER = p_Owner
       AND TABLE_NAME = p_TableName
       AND PARTITION_NAME = p_PatitionName;

    RETURN substr(v_LongVal, 1, 200);
END;
/

-- TODO: IMPROVE TO CREATE/EXCHANGE PARTITION INSTEAD OF INSERT/APPEND WHEN PARTITION DONT EXIST

SET SERVEROUT ON
DECLARE
  v_PatitionName VARCHAR2(100);
  V_CMD CLOB;
  -- V_CMD_2 CLOB;
  v_OWNER VARCHAR2(30) := UPPER('&P_OWNER');
BEGIN
  FOR I IN (SELECT TABLE_NAME FROM USER_TABLES ORDER BY TABLE_NAME)
  LOOP
    BEGIN
      select partition_name
      INTO   v_PatitionName
      from   all_tab_partitions
      where  TABLE_OWNER=v_OWNER
      AND    TABLE_NAME=i.table_name
      and    GET_HIGH_VALUE_AS_STRING(table_owner,table_name,partition_name) = q'[( '&P_SER', '&P_VERS', &P_PATCH )]';
      
      V_CMD := 'ALTER TABLE ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' EXCHANGE PARTITION ' || DBMS_ASSERT.ENQUOTE_NAME(v_PatitionName) || ' WITH TABLE ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' INCLUDING INDEXES WITH VALIDATION';
      
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        IF I.TABLE_NAME = 'T_CONTENTS'
        THEN
          V_CMD := 'INSERT /*+ APPEND */ INTO ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' SELECT * FROM ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' A WHERE NOT EXISTS (SELECT 1 FROM ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' B WHERE A.MD5_HASH = B.MD5_HASH)';
        ELSIF I.TABLE_NAME = 'T_BUGS'
        THEN
          V_CMD := 'INSERT /*+ APPEND */ INTO ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' SELECT * FROM ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' A WHERE NOT EXISTS (SELECT 1 FROM ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' B WHERE A.BUG_ID = B.BUG_ID)';
        ELSE
          V_CMD := 'INSERT /*+ APPEND */ INTO ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' SELECT * FROM ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME);
          -- V_CMD_2 := 'ALTER TABLE ' || DBMS_ASSERT.ENQUOTE_NAME(v_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' ADD PARTITION VALUES ( ''&P_SER'', ''&P_VERS'', &P_PATCH )';
          -- DBMS_OUTPUT.PUT_LINE(V_CMD_2 || ';');
          -- EXECUTE IMMEDIATE V_CMD_2;
        END IF;
    END;
    DBMS_OUTPUT.PUT_LINE(V_CMD || ';');
    EXECUTE IMMEDIATE V_CMD;
  END LOOP;
END;
/

EXIT 0
