WHENEVER SQLERROR EXIT SQL.SQLCODE

SET LINES 1000

DEF P_OWNER = '&1'
DEF P_PATCH = '&2'
DEF P_SER   = '&3'
DEF P_VERS  = '&4'

CREATE OR REPLACE FUNCTION GET_HIGH_VALUE_AS_STRING (
    P_OWNER         IN VARCHAR2,
    P_TABLENAME     IN VARCHAR2,
    P_PATITIONNAME  IN VARCHAR2
) RETURN VARCHAR2
IS
   V_LONGVAL LONG;
BEGIN
  SELECT HIGH_VALUE INTO V_LONGVAL
    FROM ALL_TAB_PARTITIONS
   WHERE TABLE_OWNER = P_OWNER
     AND TABLE_NAME = P_TABLENAME
     AND PARTITION_NAME = P_PATITIONNAME;

  RETURN SUBSTR(V_LONGVAL, 1, 200);
END;
/

-- TODO: IMPROVE TO CREATE/EXCHANGE PARTITION INSTEAD OF INSERT/APPEND WHEN PARTITION DONT EXIST

SET SERVEROUT ON
DECLARE
  V_PNAME VARCHAR2(100);
  V_HV    VARCHAR2(100);
  V_OWNER VARCHAR2(30) := UPPER('&P_OWNER');
  V_OWNER_TNAME VARCHAR2(100);

  --------------------------------------------

  FUNCTION IS_EMPTY (
    P_OWNER         IN VARCHAR2,
    P_TABLENAME     IN VARCHAR2
  ) RETURN BOOLEAN
  IS
    V_RES NUMBER;
  BEGIN
    -- DBMS_OUTPUT.PUT_LINE('SELECT 1 FROM DUAL WHERE EXISTS (SELECT 1 FROM ' || DBMS_ASSERT.ENQUOTE_NAME(P_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(P_TABLENAME) || ')');
    EXECUTE IMMEDIATE 'SELECT 1 FROM DUAL WHERE EXISTS (SELECT 1 FROM ' || DBMS_ASSERT.ENQUOTE_NAME(P_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(P_TABLENAME) || ')'
    INTO V_RES;
    RETURN FALSE;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN TRUE;
  END;

  --------------------------------------------

  FUNCTION GEN_PART_HV (
    P_OWNER         IN VARCHAR2,
    P_TABLE_NAME     IN VARCHAR2
  ) RETURN VARCHAR2
  IS
    V_HV VARCHAR2(30);
  BEGIN
    SELECT MAX(DECODE(COLUMN_POSITION,1,DECODE(COLUMN_NAME,'ORASERIES',q'['&P_SER']','ORAVERSION',q'['&P_VERS']','ORAPATCH','&P_PATCH'),'')) || ', ' ||
           MAX(DECODE(COLUMN_POSITION,2,DECODE(COLUMN_NAME,'ORASERIES',q'['&P_SER']','ORAVERSION',q'['&P_VERS']','ORAPATCH','&P_PATCH'),'')) || ', ' ||
           MAX(DECODE(COLUMN_POSITION,3,DECODE(COLUMN_NAME,'ORASERIES',q'['&P_SER']','ORAVERSION',q'['&P_VERS']','ORAPATCH','&P_PATCH'),''))
    INTO   V_HV
    FROM   ALL_PART_KEY_COLUMNS
    WHERE  OWNER=P_OWNER
    AND    NAME=P_TABLE_NAME
    AND    OBJECT_TYPE='TABLE';

    RETURN V_HV;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN '';
  END;

  --------------------------------------------

  FUNCTION GET_PART_NAME (
    P_OWNER          IN VARCHAR2,
    P_TABLE_NAME     IN VARCHAR2,
    P_HV             IN VARCHAR2
  ) RETURN VARCHAR2
  IS
    V_PART_NAME VARCHAR2(30);
  BEGIN
    SELECT PARTITION_NAME
    INTO   V_PART_NAME
    FROM   ALL_TAB_PARTITIONS
    WHERE  TABLE_OWNER=P_OWNER
    AND    TABLE_NAME=P_TABLE_NAME
    AND    GET_HIGH_VALUE_AS_STRING(TABLE_OWNER,TABLE_NAME,PARTITION_NAME) = '( ' || P_HV || ' )';

    RETURN V_PART_NAME;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN '';
  END;

  --------------------------------------------

  PROCEDURE RUN_CMD (P_CMD CLOB)
  IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(P_CMD || ';');
    EXECUTE IMMEDIATE P_CMD;
  END;

  --------------------------------------------

BEGIN
  FOR I IN (SELECT TABLE_NAME FROM USER_TABLES ORDER BY TABLE_NAME)
  LOOP

    IF IS_EMPTY(USER,I.TABLE_NAME)
    THEN
      DBMS_OUTPUT.PUT_LINE( '--- ' || I.TABLE_NAME || ' - EMPTY');
      CONTINUE;
    END IF;

    V_HV := GEN_PART_HV(V_OWNER,I.TABLE_NAME);

    -- Null V_HV = Non-partitioned table.
    
    IF V_HV IS NOT NULL
    THEN
      V_PNAME := GET_PART_NAME(V_OWNER,I.TABLE_NAME,V_HV);
    END IF;

    V_OWNER_TNAME := DBMS_ASSERT.ENQUOTE_NAME(V_OWNER) || '.' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME);

    IF V_PNAME IS NOT NULL AND V_HV IS NOT NULL
    THEN
      RUN_CMD('ALTER TABLE ' || V_OWNER_TNAME || ' EXCHANGE PARTITION ' || DBMS_ASSERT.ENQUOTE_NAME(V_PNAME) || ' WITH TABLE ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' INCLUDING INDEXES WITH VALIDATION');
    ELSIF I.TABLE_NAME = 'T_CONTENTS'
    THEN
      RUN_CMD('INSERT /*+ APPEND */ INTO ' || V_OWNER_TNAME || ' SELECT * FROM ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' A WHERE NOT EXISTS (SELECT 1 FROM ' || V_OWNER_TNAME || ' B WHERE A.MD5_HASH = B.MD5_HASH)');
    ELSIF I.TABLE_NAME = 'T_BUGS'
    THEN
      RUN_CMD('INSERT /*+ APPEND */ INTO ' || V_OWNER_TNAME || ' SELECT * FROM ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' A WHERE NOT EXISTS (SELECT 1 FROM ' || V_OWNER_TNAME || ' B WHERE A.BUG_ID = B.BUG_ID)');
    ELSE
      -- V_CMD := 'INSERT /*+ APPEND */ INTO ' || V_OWNER_TNAME || ' SELECT * FROM ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME);
      RUN_CMD('ALTER TABLE ' || V_OWNER_TNAME || ' ADD PARTITION VALUES ( ' || V_HV || ' )');
      V_PNAME := GET_PART_NAME(V_OWNER,I.TABLE_NAME,V_HV);
      RUN_CMD('ALTER TABLE ' || V_OWNER_TNAME || ' EXCHANGE PARTITION ' || DBMS_ASSERT.ENQUOTE_NAME(V_PNAME) || ' WITH TABLE ' || DBMS_ASSERT.ENQUOTE_NAME(I.TABLE_NAME) || ' INCLUDING INDEXES WITH VALIDATION');
    END IF;
  END LOOP;
END;
/

EXIT 0
